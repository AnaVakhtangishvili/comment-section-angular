import { Pipe, NgModule } from '@angular/core';
import { calculateLocale } from './date-fns-configuration.service';
import formatDuration from 'date-fns/formatDuration';
import * as i0 from "@angular/core";
import * as i1 from "./date-fns-configuration.service";
export class FormatDurationPipe {
    constructor(config, cd) {
        this.config = config;
        this.cd = cd;
        this.localeChanged$ = this.config.localeChanged.subscribe(_ => this.cd.markForCheck());
    }
    ngOnDestroy() {
        this.localeChanged$.unsubscribe();
    }
    transform(duration, options) {
        return formatDuration(duration, calculateLocale(options, this.config));
    }
}
FormatDurationPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: FormatDurationPipe, deps: [{ token: i1.DateFnsConfigurationService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Pipe });
FormatDurationPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: FormatDurationPipe, name: "dfnsFormatDuration", pure: false });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: FormatDurationPipe, decorators: [{
            type: Pipe,
            args: [{ name: 'dfnsFormatDuration', pure: false }]
        }], ctorParameters: function () { return [{ type: i1.DateFnsConfigurationService }, { type: i0.ChangeDetectorRef }]; } });
export class FormatDurationPipeModule {
}
FormatDurationPipeModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: FormatDurationPipeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
FormatDurationPipeModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: FormatDurationPipeModule, declarations: [FormatDurationPipe], exports: [FormatDurationPipe] });
FormatDurationPipeModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: FormatDurationPipeModule });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: FormatDurationPipeModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [FormatDurationPipe],
                    exports: [FormatDurationPipe]
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybWF0LWR1cmF0aW9uLnBpcGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9saWIvc3JjL2xpYi9mb3JtYXQtZHVyYXRpb24ucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsSUFBSSxFQUlKLFFBQVEsRUFDVCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBRUwsZUFBZSxFQUNoQixNQUFNLGtDQUFrQyxDQUFDO0FBRzFDLE9BQU8sY0FBYyxNQUFNLHlCQUF5QixDQUFDOzs7QUFHckQsTUFBTSxPQUFPLGtCQUFrQjtJQUc3QixZQUNTLE1BQW1DLEVBQ25DLEVBQXFCO1FBRHJCLFdBQU0sR0FBTixNQUFNLENBQTZCO1FBQ25DLE9BQUUsR0FBRixFQUFFLENBQW1CO1FBRTVCLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQzVELElBQUksQ0FBQyxFQUFFLENBQUMsWUFBWSxFQUFFLENBQ3ZCLENBQUM7SUFDSixDQUFDO0lBRUQsV0FBVztRQUNULElBQUksQ0FBQyxjQUFjLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDcEMsQ0FBQztJQUVELFNBQVMsQ0FDUCxRQUFrQixFQUNsQixPQUtDO1FBRUQsT0FBTyxjQUFjLENBQUMsUUFBUSxFQUFFLGVBQWUsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFDekUsQ0FBQzs7K0dBMUJVLGtCQUFrQjs2R0FBbEIsa0JBQWtCOzJGQUFsQixrQkFBa0I7a0JBRDlCLElBQUk7bUJBQUMsRUFBRSxJQUFJLEVBQUUsb0JBQW9CLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRTs7QUFrQ2pELE1BQU0sT0FBTyx3QkFBd0I7O3FIQUF4Qix3QkFBd0I7c0hBQXhCLHdCQUF3QixpQkFqQ3hCLGtCQUFrQixhQUFsQixrQkFBa0I7c0hBaUNsQix3QkFBd0I7MkZBQXhCLHdCQUF3QjtrQkFKcEMsUUFBUTttQkFBQztvQkFDUixZQUFZLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQztvQkFDbEMsT0FBTyxFQUFFLENBQUMsa0JBQWtCLENBQUM7aUJBQzlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgUGlwZSxcbiAgUGlwZVRyYW5zZm9ybSxcbiAgQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gIE9uRGVzdHJveSxcbiAgTmdNb2R1bGVcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICBEYXRlRm5zQ29uZmlndXJhdGlvblNlcnZpY2UsXG4gIGNhbGN1bGF0ZUxvY2FsZVxufSBmcm9tICcuL2RhdGUtZm5zLWNvbmZpZ3VyYXRpb24uc2VydmljZSc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IExvY2FsZSB9IGZyb20gJ2RhdGUtZm5zJztcbmltcG9ydCBmb3JtYXREdXJhdGlvbiBmcm9tICdkYXRlLWZucy9mb3JtYXREdXJhdGlvbic7XG5cbkBQaXBlKHsgbmFtZTogJ2RmbnNGb3JtYXREdXJhdGlvbicsIHB1cmU6IGZhbHNlIH0pXG5leHBvcnQgY2xhc3MgRm9ybWF0RHVyYXRpb25QaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSwgT25EZXN0cm95IHtcbiAgcHJpdmF0ZSBsb2NhbGVDaGFuZ2VkJDogU3Vic2NyaXB0aW9uO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyBjb25maWc6IERhdGVGbnNDb25maWd1cmF0aW9uU2VydmljZSxcbiAgICBwdWJsaWMgY2Q6IENoYW5nZURldGVjdG9yUmVmXG4gICkge1xuICAgIHRoaXMubG9jYWxlQ2hhbmdlZCQgPSB0aGlzLmNvbmZpZy5sb2NhbGVDaGFuZ2VkLnN1YnNjcmliZShfID0+XG4gICAgICB0aGlzLmNkLm1hcmtGb3JDaGVjaygpXG4gICAgKTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgIHRoaXMubG9jYWxlQ2hhbmdlZCQudW5zdWJzY3JpYmUoKTtcbiAgfVxuXG4gIHRyYW5zZm9ybShcbiAgICBkdXJhdGlvbjogRHVyYXRpb24sXG4gICAgb3B0aW9ucz86IHtcbiAgICAgIGZvcm1hdD86IHN0cmluZ1tdO1xuICAgICAgemVybz86IGJvb2xlYW47XG4gICAgICBkZWxpbWl0ZXI/OiBzdHJpbmc7XG4gICAgICBsb2NhbGU/OiBMb2NhbGU7XG4gICAgfVxuICApOiBzdHJpbmcge1xuICAgIHJldHVybiBmb3JtYXREdXJhdGlvbihkdXJhdGlvbiwgY2FsY3VsYXRlTG9jYWxlKG9wdGlvbnMsIHRoaXMuY29uZmlnKSk7XG4gIH1cbn1cblxuQE5nTW9kdWxlKHtcbiAgZGVjbGFyYXRpb25zOiBbRm9ybWF0RHVyYXRpb25QaXBlXSxcbiAgZXhwb3J0czogW0Zvcm1hdER1cmF0aW9uUGlwZV1cbn0pXG5leHBvcnQgY2xhc3MgRm9ybWF0RHVyYXRpb25QaXBlTW9kdWxlIHt9XG4iXX0=