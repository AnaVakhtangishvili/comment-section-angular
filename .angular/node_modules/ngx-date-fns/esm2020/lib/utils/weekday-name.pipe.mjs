import { NgModule, Pipe } from '@angular/core';
import eachDayOfInterval from 'date-fns/eachDayOfInterval';
import endOfWeek from 'date-fns/endOfWeek';
import format from 'date-fns/format';
import startOfWeek from 'date-fns/startOfWeek';
import { calculateLocale } from '../date-fns-configuration.service';
import * as i0 from "@angular/core";
import * as i1 from "../date-fns-configuration.service";
const formats = {
    x1: 'eeeee',
    x2: 'eeeeee',
    x3: 'eee',
    full: 'eeee'
};
export class WeekdayNamePipe {
    constructor(config, cd) {
        this.config = config;
        this.cd = cd;
        this.localeChanged$ = this.config.localeChanged.subscribe(_ => this.cd.markForCheck());
    }
    ngOnDestroy() {
        this.localeChanged$.unsubscribe();
    }
    transform(day, view = 'full', options) {
        const locale = calculateLocale(options, this.config);
        const now = new Date();
        const week = eachDayOfInterval({
            start: startOfWeek(now, locale),
            end: endOfWeek(now, locale)
        });
        return format(week[day], formats[view], locale);
    }
}
WeekdayNamePipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: WeekdayNamePipe, deps: [{ token: i1.DateFnsConfigurationService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Pipe });
WeekdayNamePipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: WeekdayNamePipe, name: "dfnsWeekdayName", pure: false });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: WeekdayNamePipe, decorators: [{
            type: Pipe,
            args: [{ name: 'dfnsWeekdayName', pure: false }]
        }], ctorParameters: function () { return [{ type: i1.DateFnsConfigurationService }, { type: i0.ChangeDetectorRef }]; } });
export class WeekdayNamePipeModule {
}
WeekdayNamePipeModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: WeekdayNamePipeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
WeekdayNamePipeModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: WeekdayNamePipeModule, declarations: [WeekdayNamePipe], exports: [WeekdayNamePipe] });
WeekdayNamePipeModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: WeekdayNamePipeModule });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: WeekdayNamePipeModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [WeekdayNamePipe],
                    exports: [WeekdayNamePipe]
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vla2RheS1uYW1lLnBpcGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9saWIvc3JjL2xpYi91dGlscy93ZWVrZGF5LW5hbWUucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBRUwsUUFBUSxFQUVSLElBQUksRUFFTCxNQUFNLGVBQWUsQ0FBQztBQUV2QixPQUFPLGlCQUFpQixNQUFNLDRCQUE0QixDQUFDO0FBQzNELE9BQU8sU0FBUyxNQUFNLG9CQUFvQixDQUFDO0FBQzNDLE9BQU8sTUFBTSxNQUFNLGlCQUFpQixDQUFDO0FBQ3JDLE9BQU8sV0FBVyxNQUFNLHNCQUFzQixDQUFDO0FBRS9DLE9BQU8sRUFDTCxlQUFlLEVBRWhCLE1BQU0sbUNBQW1DLENBQUM7OztBQUUzQyxNQUFNLE9BQU8sR0FBRztJQUNkLEVBQUUsRUFBRSxPQUFPO0lBQ1gsRUFBRSxFQUFFLFFBQVE7SUFDWixFQUFFLEVBQUUsS0FBSztJQUNULElBQUksRUFBRSxNQUFNO0NBQ2IsQ0FBQztBQVdGLE1BQU0sT0FBTyxlQUFlO0lBRzFCLFlBQ1MsTUFBbUMsRUFDbkMsRUFBcUI7UUFEckIsV0FBTSxHQUFOLE1BQU0sQ0FBNkI7UUFDbkMsT0FBRSxHQUFGLEVBQUUsQ0FBbUI7UUFFNUIsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FDNUQsSUFBSSxDQUFDLEVBQUUsQ0FBQyxZQUFZLEVBQUUsQ0FDdkIsQ0FBQztJQUNKLENBQUM7SUFFRCxXQUFXO1FBQ1QsSUFBSSxDQUFDLGNBQWMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUNwQyxDQUFDO0lBRUQsU0FBUyxDQUNQLEdBQVcsRUFDWCxPQUEwQixNQUFNLEVBQ2hDLE9BRUM7UUFFRCxNQUFNLE1BQU0sR0FBRyxlQUFlLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNyRCxNQUFNLEdBQUcsR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDO1FBQ3ZCLE1BQU0sSUFBSSxHQUFHLGlCQUFpQixDQUFDO1lBQzdCLEtBQUssRUFBRSxXQUFXLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQztZQUMvQixHQUFHLEVBQUUsU0FBUyxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUM7U0FDNUIsQ0FBQyxDQUFDO1FBQ0gsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUNsRCxDQUFDOzs0R0E5QlUsZUFBZTswR0FBZixlQUFlOzJGQUFmLGVBQWU7a0JBRDNCLElBQUk7bUJBQUMsRUFBRSxJQUFJLEVBQUUsaUJBQWlCLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRTs7QUFzQzlDLE1BQU0sT0FBTyxxQkFBcUI7O2tIQUFyQixxQkFBcUI7bUhBQXJCLHFCQUFxQixpQkFyQ3JCLGVBQWUsYUFBZixlQUFlO21IQXFDZixxQkFBcUI7MkZBQXJCLHFCQUFxQjtrQkFKakMsUUFBUTttQkFBQztvQkFDUixZQUFZLEVBQUUsQ0FBQyxlQUFlLENBQUM7b0JBQy9CLE9BQU8sRUFBRSxDQUFDLGVBQWUsQ0FBQztpQkFDM0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBDaGFuZ2VEZXRlY3RvclJlZixcbiAgTmdNb2R1bGUsXG4gIE9uRGVzdHJveSxcbiAgUGlwZSxcbiAgUGlwZVRyYW5zZm9ybVxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IExvY2FsZSB9IGZyb20gJ2RhdGUtZm5zJztcbmltcG9ydCBlYWNoRGF5T2ZJbnRlcnZhbCBmcm9tICdkYXRlLWZucy9lYWNoRGF5T2ZJbnRlcnZhbCc7XG5pbXBvcnQgZW5kT2ZXZWVrIGZyb20gJ2RhdGUtZm5zL2VuZE9mV2Vlayc7XG5pbXBvcnQgZm9ybWF0IGZyb20gJ2RhdGUtZm5zL2Zvcm1hdCc7XG5pbXBvcnQgc3RhcnRPZldlZWsgZnJvbSAnZGF0ZS1mbnMvc3RhcnRPZldlZWsnO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQge1xuICBjYWxjdWxhdGVMb2NhbGUsXG4gIERhdGVGbnNDb25maWd1cmF0aW9uU2VydmljZVxufSBmcm9tICcuLi9kYXRlLWZucy1jb25maWd1cmF0aW9uLnNlcnZpY2UnO1xuXG5jb25zdCBmb3JtYXRzID0ge1xuICB4MTogJ2VlZWVlJyxcbiAgeDI6ICdlZWVlZWUnLFxuICB4MzogJ2VlZScsXG4gIGZ1bGw6ICdlZWVlJ1xufTtcblxuLyoqXG4gKiAtIGB4MWA6IE9uZSBjaGFyLiAnTScgZm9yIE1vbmRheS5cbiAqIC0gYHgyYDogVHdvIGNoYXJzLiAnTW8nIGZvciBNb25kYXkuXG4gKiAtIGB4M2A6IFRocmVlIGNoYXJzLiAnTW9uJyBmb3IgTW9uZGF5LlxuICogLSBgZnVsbGA6IEZ1bGwgd2Vla2RheSBuYW1lLiAnTW9uZGF5JyBmb3IgTW9uZGF5LlxuICovXG5leHBvcnQgdHlwZSBXZWVrZGF5TmFtZUZvcm1hdCA9IGtleW9mIHR5cGVvZiBmb3JtYXRzO1xuXG5AUGlwZSh7IG5hbWU6ICdkZm5zV2Vla2RheU5hbWUnLCBwdXJlOiBmYWxzZSB9KVxuZXhwb3J0IGNsYXNzIFdlZWtkYXlOYW1lUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0sIE9uRGVzdHJveSB7XG4gIHByaXZhdGUgbG9jYWxlQ2hhbmdlZCQ6IFN1YnNjcmlwdGlvbjtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgY29uZmlnOiBEYXRlRm5zQ29uZmlndXJhdGlvblNlcnZpY2UsXG4gICAgcHVibGljIGNkOiBDaGFuZ2VEZXRlY3RvclJlZlxuICApIHtcbiAgICB0aGlzLmxvY2FsZUNoYW5nZWQkID0gdGhpcy5jb25maWcubG9jYWxlQ2hhbmdlZC5zdWJzY3JpYmUoXyA9PlxuICAgICAgdGhpcy5jZC5tYXJrRm9yQ2hlY2soKVxuICAgICk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICB0aGlzLmxvY2FsZUNoYW5nZWQkLnVuc3Vic2NyaWJlKCk7XG4gIH1cblxuICB0cmFuc2Zvcm0oXG4gICAgZGF5OiBudW1iZXIsXG4gICAgdmlldzogV2Vla2RheU5hbWVGb3JtYXQgPSAnZnVsbCcsXG4gICAgb3B0aW9ucz86IHtcbiAgICAgIGxvY2FsZT86IExvY2FsZTtcbiAgICB9XG4gICk6IHN0cmluZyB7XG4gICAgY29uc3QgbG9jYWxlID0gY2FsY3VsYXRlTG9jYWxlKG9wdGlvbnMsIHRoaXMuY29uZmlnKTtcbiAgICBjb25zdCBub3cgPSBuZXcgRGF0ZSgpO1xuICAgIGNvbnN0IHdlZWsgPSBlYWNoRGF5T2ZJbnRlcnZhbCh7XG4gICAgICBzdGFydDogc3RhcnRPZldlZWsobm93LCBsb2NhbGUpLFxuICAgICAgZW5kOiBlbmRPZldlZWsobm93LCBsb2NhbGUpXG4gICAgfSk7XG4gICAgcmV0dXJuIGZvcm1hdCh3ZWVrW2RheV0sIGZvcm1hdHNbdmlld10sIGxvY2FsZSk7XG4gIH1cbn1cblxuQE5nTW9kdWxlKHtcbiAgZGVjbGFyYXRpb25zOiBbV2Vla2RheU5hbWVQaXBlXSxcbiAgZXhwb3J0czogW1dlZWtkYXlOYW1lUGlwZV1cbn0pXG5leHBvcnQgY2xhc3MgV2Vla2RheU5hbWVQaXBlTW9kdWxlIHt9XG4iXX0=