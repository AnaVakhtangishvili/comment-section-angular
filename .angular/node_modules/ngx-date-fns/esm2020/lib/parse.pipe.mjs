import { Pipe, NgModule } from '@angular/core';
import { calculateLocale } from './date-fns-configuration.service';
import parse from 'date-fns/parse';
import * as i0 from "@angular/core";
import * as i1 from "./date-fns-configuration.service";
export class ParsePipe {
    constructor(config, cd) {
        this.config = config;
        this.cd = cd;
        this.localeChanged$ = this.config.localeChanged.subscribe(_ => this.cd.markForCheck());
    }
    ngOnDestroy() {
        this.localeChanged$.unsubscribe();
    }
    transform(dateString, formatString, backupDate, options) {
        return parse(dateString, formatString, backupDate, calculateLocale(options, this.config));
    }
}
ParsePipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: ParsePipe, deps: [{ token: i1.DateFnsConfigurationService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Pipe });
ParsePipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: ParsePipe, name: "dfnsParse", pure: false });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: ParsePipe, decorators: [{
            type: Pipe,
            args: [{ name: 'dfnsParse', pure: false }]
        }], ctorParameters: function () { return [{ type: i1.DateFnsConfigurationService }, { type: i0.ChangeDetectorRef }]; } });
export class ParsePipeModule {
}
ParsePipeModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: ParsePipeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
ParsePipeModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: ParsePipeModule, declarations: [ParsePipe], exports: [ParsePipe] });
ParsePipeModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: ParsePipeModule });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: ParsePipeModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [ParsePipe],
                    exports: [ParsePipe]
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFyc2UucGlwZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL2xpYi9zcmMvbGliL3BhcnNlLnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLElBQUksRUFJSixRQUFRLEVBQ1QsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUVMLGVBQWUsRUFDaEIsTUFBTSxrQ0FBa0MsQ0FBQztBQUkxQyxPQUFPLEtBQUssTUFBTSxnQkFBZ0IsQ0FBQzs7O0FBR25DLE1BQU0sT0FBTyxTQUFTO0lBR3BCLFlBQ1MsTUFBbUMsRUFDbkMsRUFBcUI7UUFEckIsV0FBTSxHQUFOLE1BQU0sQ0FBNkI7UUFDbkMsT0FBRSxHQUFGLEVBQUUsQ0FBbUI7UUFFNUIsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FDNUQsSUFBSSxDQUFDLEVBQUUsQ0FBQyxZQUFZLEVBQUUsQ0FDdkIsQ0FBQztJQUNKLENBQUM7SUFFRCxXQUFXO1FBQ1QsSUFBSSxDQUFDLGNBQWMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUNwQyxDQUFDO0lBRUQsU0FBUyxDQUNQLFVBQWtCLEVBQ2xCLFlBQW9CLEVBQ3BCLFVBQTRCLEVBQzVCLE9BTUM7UUFFRCxPQUFPLEtBQUssQ0FDVixVQUFVLEVBQ1YsWUFBWSxFQUNaLFVBQVUsRUFDVixlQUFlLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FDdEMsQ0FBQztJQUNKLENBQUM7O3NHQWxDVSxTQUFTO29HQUFULFNBQVM7MkZBQVQsU0FBUztrQkFEckIsSUFBSTttQkFBQyxFQUFFLElBQUksRUFBRSxXQUFXLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRTs7QUEwQ3hDLE1BQU0sT0FBTyxlQUFlOzs0R0FBZixlQUFlOzZHQUFmLGVBQWUsaUJBekNmLFNBQVMsYUFBVCxTQUFTOzZHQXlDVCxlQUFlOzJGQUFmLGVBQWU7a0JBSjNCLFFBQVE7bUJBQUM7b0JBQ1IsWUFBWSxFQUFFLENBQUMsU0FBUyxDQUFDO29CQUN6QixPQUFPLEVBQUUsQ0FBQyxTQUFTLENBQUM7aUJBQ3JCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgUGlwZSxcbiAgUGlwZVRyYW5zZm9ybSxcbiAgQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gIE9uRGVzdHJveSxcbiAgTmdNb2R1bGVcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICBEYXRlRm5zQ29uZmlndXJhdGlvblNlcnZpY2UsXG4gIGNhbGN1bGF0ZUxvY2FsZVxufSBmcm9tICcuL2RhdGUtZm5zLWNvbmZpZ3VyYXRpb24uc2VydmljZSc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IERhdGVGbnNJbnB1dERhdGUgfSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCB7IExvY2FsZSB9IGZyb20gJ2RhdGUtZm5zJztcbmltcG9ydCBwYXJzZSBmcm9tICdkYXRlLWZucy9wYXJzZSc7XG5cbkBQaXBlKHsgbmFtZTogJ2RmbnNQYXJzZScsIHB1cmU6IGZhbHNlIH0pXG5leHBvcnQgY2xhc3MgUGFyc2VQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSwgT25EZXN0cm95IHtcbiAgcHJpdmF0ZSBsb2NhbGVDaGFuZ2VkJDogU3Vic2NyaXB0aW9uO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyBjb25maWc6IERhdGVGbnNDb25maWd1cmF0aW9uU2VydmljZSxcbiAgICBwdWJsaWMgY2Q6IENoYW5nZURldGVjdG9yUmVmXG4gICkge1xuICAgIHRoaXMubG9jYWxlQ2hhbmdlZCQgPSB0aGlzLmNvbmZpZy5sb2NhbGVDaGFuZ2VkLnN1YnNjcmliZShfID0+XG4gICAgICB0aGlzLmNkLm1hcmtGb3JDaGVjaygpXG4gICAgKTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgIHRoaXMubG9jYWxlQ2hhbmdlZCQudW5zdWJzY3JpYmUoKTtcbiAgfVxuXG4gIHRyYW5zZm9ybShcbiAgICBkYXRlU3RyaW5nOiBzdHJpbmcsXG4gICAgZm9ybWF0U3RyaW5nOiBzdHJpbmcsXG4gICAgYmFja3VwRGF0ZTogRGF0ZUZuc0lucHV0RGF0ZSxcbiAgICBvcHRpb25zPzoge1xuICAgICAgbG9jYWxlPzogTG9jYWxlO1xuICAgICAgd2Vla1N0YXJ0c09uPzogMCB8IDEgfCAyIHwgMyB8IDQgfCA1IHwgNjtcbiAgICAgIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZT86IG51bWJlcjtcbiAgICAgIHVzZUFkZGl0aW9uYWxXZWVrWWVhclRva2Vucz86IGJvb2xlYW47XG4gICAgICB1c2VBZGRpdGlvbmFsRGF5T2ZZZWFyVG9rZW5zPzogYm9vbGVhbjtcbiAgICB9XG4gICk6IERhdGUge1xuICAgIHJldHVybiBwYXJzZShcbiAgICAgIGRhdGVTdHJpbmcsXG4gICAgICBmb3JtYXRTdHJpbmcsXG4gICAgICBiYWNrdXBEYXRlLFxuICAgICAgY2FsY3VsYXRlTG9jYWxlKG9wdGlvbnMsIHRoaXMuY29uZmlnKVxuICAgICk7XG4gIH1cbn1cblxuQE5nTW9kdWxlKHtcbiAgZGVjbGFyYXRpb25zOiBbUGFyc2VQaXBlXSxcbiAgZXhwb3J0czogW1BhcnNlUGlwZV1cbn0pXG5leHBvcnQgY2xhc3MgUGFyc2VQaXBlTW9kdWxlIHt9XG4iXX0=