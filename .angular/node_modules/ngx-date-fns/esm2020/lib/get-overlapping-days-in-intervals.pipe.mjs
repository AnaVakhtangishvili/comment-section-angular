import { NgModule, Pipe } from '@angular/core';
import getOverlappingDaysInIntervals from 'date-fns/getOverlappingDaysInIntervals';
import * as i0 from "@angular/core";
export class GetOverlappingDaysInIntervalsPipe {
    transform(intervalLeft, intervalRight) {
        return getOverlappingDaysInIntervals(intervalLeft, intervalRight);
    }
}
GetOverlappingDaysInIntervalsPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: GetOverlappingDaysInIntervalsPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
GetOverlappingDaysInIntervalsPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: GetOverlappingDaysInIntervalsPipe, name: "dfnsGetOverlappingDaysInIntervals" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: GetOverlappingDaysInIntervalsPipe, decorators: [{
            type: Pipe,
            args: [{ name: 'dfnsGetOverlappingDaysInIntervals' }]
        }] });
export class GetOverlappingDaysInIntervalsPipeModule {
}
GetOverlappingDaysInIntervalsPipeModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: GetOverlappingDaysInIntervalsPipeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
GetOverlappingDaysInIntervalsPipeModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: GetOverlappingDaysInIntervalsPipeModule, declarations: [GetOverlappingDaysInIntervalsPipe], exports: [GetOverlappingDaysInIntervalsPipe] });
GetOverlappingDaysInIntervalsPipeModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: GetOverlappingDaysInIntervalsPipeModule });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: GetOverlappingDaysInIntervalsPipeModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [GetOverlappingDaysInIntervalsPipe],
                    exports: [GetOverlappingDaysInIntervalsPipe]
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0LW92ZXJsYXBwaW5nLWRheXMtaW4taW50ZXJ2YWxzLnBpcGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9saWIvc3JjL2xpYi9nZXQtb3ZlcmxhcHBpbmctZGF5cy1pbi1pbnRlcnZhbHMucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBaUIsTUFBTSxlQUFlLENBQUM7QUFFOUQsT0FBTyw2QkFBNkIsTUFBTSx3Q0FBd0MsQ0FBQzs7QUFHbkYsTUFBTSxPQUFPLGlDQUFpQztJQUM1QyxTQUFTLENBQ1AsWUFBZ0UsRUFDaEUsYUFBaUU7UUFFakUsT0FBTyw2QkFBNkIsQ0FBQyxZQUFZLEVBQUUsYUFBYSxDQUFDLENBQUM7SUFDcEUsQ0FBQzs7OEhBTlUsaUNBQWlDOzRIQUFqQyxpQ0FBaUM7MkZBQWpDLGlDQUFpQztrQkFEN0MsSUFBSTttQkFBQyxFQUFFLElBQUksRUFBRSxtQ0FBbUMsRUFBRTs7QUFjbkQsTUFBTSxPQUFPLHVDQUF1Qzs7b0lBQXZDLHVDQUF1QztxSUFBdkMsdUNBQXVDLGlCQWJ2QyxpQ0FBaUMsYUFBakMsaUNBQWlDO3FJQWFqQyx1Q0FBdUM7MkZBQXZDLHVDQUF1QztrQkFKbkQsUUFBUTttQkFBQztvQkFDUixZQUFZLEVBQUUsQ0FBQyxpQ0FBaUMsQ0FBQztvQkFDakQsT0FBTyxFQUFFLENBQUMsaUNBQWlDLENBQUM7aUJBQzdDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdNb2R1bGUsIFBpcGUsIFBpcGVUcmFuc2Zvcm0gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IERhdGVGbnNJbnB1dERhdGUgfSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCBnZXRPdmVybGFwcGluZ0RheXNJbkludGVydmFscyBmcm9tICdkYXRlLWZucy9nZXRPdmVybGFwcGluZ0RheXNJbkludGVydmFscyc7XG5cbkBQaXBlKHsgbmFtZTogJ2RmbnNHZXRPdmVybGFwcGluZ0RheXNJbkludGVydmFscycgfSlcbmV4cG9ydCBjbGFzcyBHZXRPdmVybGFwcGluZ0RheXNJbkludGVydmFsc1BpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcbiAgdHJhbnNmb3JtKFxuICAgIGludGVydmFsTGVmdDogeyBzdGFydDogRGF0ZUZuc0lucHV0RGF0ZTsgZW5kOiBEYXRlRm5zSW5wdXREYXRlIH0sXG4gICAgaW50ZXJ2YWxSaWdodDogeyBzdGFydDogRGF0ZUZuc0lucHV0RGF0ZTsgZW5kOiBEYXRlRm5zSW5wdXREYXRlIH1cbiAgKTogbnVtYmVyIHtcbiAgICByZXR1cm4gZ2V0T3ZlcmxhcHBpbmdEYXlzSW5JbnRlcnZhbHMoaW50ZXJ2YWxMZWZ0LCBpbnRlcnZhbFJpZ2h0KTtcbiAgfVxufVxuXG5ATmdNb2R1bGUoe1xuICBkZWNsYXJhdGlvbnM6IFtHZXRPdmVybGFwcGluZ0RheXNJbkludGVydmFsc1BpcGVdLFxuICBleHBvcnRzOiBbR2V0T3ZlcmxhcHBpbmdEYXlzSW5JbnRlcnZhbHNQaXBlXVxufSlcbmV4cG9ydCBjbGFzcyBHZXRPdmVybGFwcGluZ0RheXNJbkludGVydmFsc1BpcGVNb2R1bGUge31cbiJdfQ==