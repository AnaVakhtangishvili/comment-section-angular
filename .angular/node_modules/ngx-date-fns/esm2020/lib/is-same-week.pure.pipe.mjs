import { NgModule, Pipe } from '@angular/core';
import { calculateLocale } from './date-fns-configuration.service';
import isSameWeek from 'date-fns/isSameWeek';
import * as i0 from "@angular/core";
import * as i1 from "./date-fns-configuration.service";
export class IsSameWeekPurePipe {
    constructor(config) {
        this.config = config;
    }
    transform(dateLeft, dateRight, options) {
        return isSameWeek(dateLeft, dateRight, calculateLocale(options, this.config));
    }
}
IsSameWeekPurePipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: IsSameWeekPurePipe, deps: [{ token: i1.DateFnsConfigurationService }], target: i0.ɵɵFactoryTarget.Pipe });
IsSameWeekPurePipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: IsSameWeekPurePipe, name: "dfnsIsSameWeekPure" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: IsSameWeekPurePipe, decorators: [{
            type: Pipe,
            args: [{ name: 'dfnsIsSameWeekPure' }]
        }], ctorParameters: function () { return [{ type: i1.DateFnsConfigurationService }]; } });
export class IsSameWeekPurePipeModule {
}
IsSameWeekPurePipeModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: IsSameWeekPurePipeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
IsSameWeekPurePipeModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: IsSameWeekPurePipeModule, declarations: [IsSameWeekPurePipe], exports: [IsSameWeekPurePipe] });
IsSameWeekPurePipeModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: IsSameWeekPurePipeModule });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: IsSameWeekPurePipeModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [IsSameWeekPurePipe],
                    exports: [IsSameWeekPurePipe]
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXMtc2FtZS13ZWVrLnB1cmUucGlwZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL2xpYi9zcmMvbGliL2lzLXNhbWUtd2Vlay5wdXJlLnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQWlCLE1BQU0sZUFBZSxDQUFDO0FBQzlELE9BQU8sRUFDTCxlQUFlLEVBRWhCLE1BQU0sa0NBQWtDLENBQUM7QUFFMUMsT0FBTyxVQUFVLE1BQU0scUJBQXFCLENBQUM7OztBQUc3QyxNQUFNLE9BQU8sa0JBQWtCO0lBQzdCLFlBQW1CLE1BQW1DO1FBQW5DLFdBQU0sR0FBTixNQUFNLENBQTZCO0lBQUcsQ0FBQztJQUUxRCxTQUFTLENBQ1AsUUFBMEIsRUFDMUIsU0FBMkIsRUFDM0IsT0FHQztRQUVELE9BQU8sVUFBVSxDQUNmLFFBQVEsRUFDUixTQUFTLEVBQ1QsZUFBZSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQ3RDLENBQUM7SUFDSixDQUFDOzsrR0FoQlUsa0JBQWtCOzZHQUFsQixrQkFBa0I7MkZBQWxCLGtCQUFrQjtrQkFEOUIsSUFBSTttQkFBQyxFQUFFLElBQUksRUFBRSxvQkFBb0IsRUFBRTs7QUF3QnBDLE1BQU0sT0FBTyx3QkFBd0I7O3FIQUF4Qix3QkFBd0I7c0hBQXhCLHdCQUF3QixpQkF2QnhCLGtCQUFrQixhQUFsQixrQkFBa0I7c0hBdUJsQix3QkFBd0I7MkZBQXhCLHdCQUF3QjtrQkFKcEMsUUFBUTttQkFBQztvQkFDUixZQUFZLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQztvQkFDbEMsT0FBTyxFQUFFLENBQUMsa0JBQWtCLENBQUM7aUJBQzlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdNb2R1bGUsIFBpcGUsIFBpcGVUcmFuc2Zvcm0gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7XG4gIGNhbGN1bGF0ZUxvY2FsZSxcbiAgRGF0ZUZuc0NvbmZpZ3VyYXRpb25TZXJ2aWNlXG59IGZyb20gJy4vZGF0ZS1mbnMtY29uZmlndXJhdGlvbi5zZXJ2aWNlJztcbmltcG9ydCB7IERhdGVGbnNJbnB1dERhdGUsIERhdGVGbnNXZWVrSW5kZXggfSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCBpc1NhbWVXZWVrIGZyb20gJ2RhdGUtZm5zL2lzU2FtZVdlZWsnO1xuXG5AUGlwZSh7IG5hbWU6ICdkZm5zSXNTYW1lV2Vla1B1cmUnIH0pXG5leHBvcnQgY2xhc3MgSXNTYW1lV2Vla1B1cmVQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBjb25maWc6IERhdGVGbnNDb25maWd1cmF0aW9uU2VydmljZSkge31cblxuICB0cmFuc2Zvcm0oXG4gICAgZGF0ZUxlZnQ6IERhdGVGbnNJbnB1dERhdGUsXG4gICAgZGF0ZVJpZ2h0OiBEYXRlRm5zSW5wdXREYXRlLFxuICAgIG9wdGlvbnM/OiB7XG4gICAgICBsb2NhbGU/OiBMb2NhbGU7XG4gICAgICB3ZWVrU3RhcnRzT24/OiBEYXRlRm5zV2Vla0luZGV4O1xuICAgIH1cbiAgKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIGlzU2FtZVdlZWsoXG4gICAgICBkYXRlTGVmdCxcbiAgICAgIGRhdGVSaWdodCxcbiAgICAgIGNhbGN1bGF0ZUxvY2FsZShvcHRpb25zLCB0aGlzLmNvbmZpZylcbiAgICApO1xuICB9XG59XG5cbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9uczogW0lzU2FtZVdlZWtQdXJlUGlwZV0sXG4gIGV4cG9ydHM6IFtJc1NhbWVXZWVrUHVyZVBpcGVdXG59KVxuZXhwb3J0IGNsYXNzIElzU2FtZVdlZWtQdXJlUGlwZU1vZHVsZSB7fVxuIl19