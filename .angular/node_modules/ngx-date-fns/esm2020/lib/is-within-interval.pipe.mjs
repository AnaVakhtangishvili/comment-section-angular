import { NgModule, Pipe } from '@angular/core';
import isWithinInterval from 'date-fns/isWithinInterval';
import * as i0 from "@angular/core";
export class IsWithinIntervalPipe {
    transform(date, interval) {
        return isWithinInterval(date, interval);
    }
}
IsWithinIntervalPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: IsWithinIntervalPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
IsWithinIntervalPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: IsWithinIntervalPipe, name: "dfnsIsWithinInterval" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: IsWithinIntervalPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'dfnsIsWithinInterval'
                }]
        }] });
export class IsWithinIntervalPipeModule {
}
IsWithinIntervalPipeModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: IsWithinIntervalPipeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
IsWithinIntervalPipeModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: IsWithinIntervalPipeModule, declarations: [IsWithinIntervalPipe], exports: [IsWithinIntervalPipe] });
IsWithinIntervalPipeModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: IsWithinIntervalPipeModule });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: IsWithinIntervalPipeModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [IsWithinIntervalPipe],
                    exports: [IsWithinIntervalPipe]
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXMtd2l0aGluLWludGVydmFsLnBpcGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9saWIvc3JjL2xpYi9pcy13aXRoaW4taW50ZXJ2YWwucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBaUIsTUFBTSxlQUFlLENBQUM7QUFHOUQsT0FBTyxnQkFBZ0IsTUFBTSwyQkFBMkIsQ0FBQzs7QUFLekQsTUFBTSxPQUFPLG9CQUFvQjtJQUUvQixTQUFTLENBQUMsSUFBc0IsRUFBRSxRQUFrQjtRQUNsRCxPQUFPLGdCQUFnQixDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQztJQUMxQyxDQUFDOztpSEFKVSxvQkFBb0I7K0dBQXBCLG9CQUFvQjsyRkFBcEIsb0JBQW9CO2tCQUhoQyxJQUFJO21CQUFDO29CQUNKLElBQUksRUFBRSxzQkFBc0I7aUJBQzdCOztBQWFELE1BQU0sT0FBTywwQkFBMEI7O3VIQUExQiwwQkFBMEI7d0hBQTFCLDBCQUEwQixpQkFaMUIsb0JBQW9CLGFBQXBCLG9CQUFvQjt3SEFZcEIsMEJBQTBCOzJGQUExQiwwQkFBMEI7a0JBSnRDLFFBQVE7bUJBQUM7b0JBQ1IsWUFBWSxFQUFFLENBQUMsb0JBQW9CLENBQUM7b0JBQ3BDLE9BQU8sRUFBRSxDQUFDLG9CQUFvQixDQUFDO2lCQUNoQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlLCBQaXBlLCBQaXBlVHJhbnNmb3JtIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBJbnRlcnZhbCB9IGZyb20gJ2RhdGUtZm5zJztcbmltcG9ydCB7IERhdGVGbnNJbnB1dERhdGUgfSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCBpc1dpdGhpbkludGVydmFsIGZyb20gJ2RhdGUtZm5zL2lzV2l0aGluSW50ZXJ2YWwnO1xuXG5AUGlwZSh7XG4gIG5hbWU6ICdkZm5zSXNXaXRoaW5JbnRlcnZhbCdcbn0pXG5leHBvcnQgY2xhc3MgSXNXaXRoaW5JbnRlcnZhbFBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcblxuICB0cmFuc2Zvcm0oZGF0ZTogRGF0ZUZuc0lucHV0RGF0ZSwgaW50ZXJ2YWw6IEludGVydmFsKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIGlzV2l0aGluSW50ZXJ2YWwoZGF0ZSwgaW50ZXJ2YWwpO1xuICB9XG5cbn1cblxuQE5nTW9kdWxlKHtcbiAgZGVjbGFyYXRpb25zOiBbSXNXaXRoaW5JbnRlcnZhbFBpcGVdLFxuICBleHBvcnRzOiBbSXNXaXRoaW5JbnRlcnZhbFBpcGVdXG59KVxuZXhwb3J0IGNsYXNzIElzV2l0aGluSW50ZXJ2YWxQaXBlTW9kdWxlIHsgfVxuIl19