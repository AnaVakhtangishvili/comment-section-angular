import { NgModule, Pipe } from '@angular/core';
import { calculateLocale } from './date-fns-configuration.service';
import { isMatch } from 'date-fns';
import * as i0 from "@angular/core";
import * as i1 from "./date-fns-configuration.service";
export class IsMatchPipe {
    constructor(config, cd) {
        this.config = config;
        this.cd = cd;
        this.localeChanged$ = this.config.localeChanged.subscribe(_ => this.cd.markForCheck());
    }
    ngOnDestroy() {
        this.localeChanged$.unsubscribe();
    }
    transform(dateString, formatString, options) {
        return isMatch(dateString, formatString, calculateLocale(options, this.config));
    }
}
IsMatchPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: IsMatchPipe, deps: [{ token: i1.DateFnsConfigurationService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Pipe });
IsMatchPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: IsMatchPipe, name: "dfnsIsMatch", pure: false });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: IsMatchPipe, decorators: [{
            type: Pipe,
            args: [{ name: 'dfnsIsMatch', pure: false }]
        }], ctorParameters: function () { return [{ type: i1.DateFnsConfigurationService }, { type: i0.ChangeDetectorRef }]; } });
export class IsMatchPipeModule {
}
IsMatchPipeModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: IsMatchPipeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
IsMatchPipeModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: IsMatchPipeModule, declarations: [IsMatchPipe], exports: [IsMatchPipe] });
IsMatchPipeModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: IsMatchPipeModule });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: IsMatchPipeModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [IsMatchPipe],
                    exports: [IsMatchPipe]
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXMtbWF0Y2gucGlwZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL2xpYi9zcmMvbGliL2lzLW1hdGNoLnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUVMLFFBQVEsRUFFUixJQUFJLEVBRUwsTUFBTSxlQUFlLENBQUM7QUFFdkIsT0FBTyxFQUNMLGVBQWUsRUFFaEIsTUFBTSxrQ0FBa0MsQ0FBQztBQUMxQyxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sVUFBVSxDQUFDOzs7QUFJbkMsTUFBTSxPQUFPLFdBQVc7SUFHdEIsWUFDUyxNQUFtQyxFQUNuQyxFQUFxQjtRQURyQixXQUFNLEdBQU4sTUFBTSxDQUE2QjtRQUNuQyxPQUFFLEdBQUYsRUFBRSxDQUFtQjtRQUU1QixJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUM1RCxJQUFJLENBQUMsRUFBRSxDQUFDLFlBQVksRUFBRSxDQUN2QixDQUFDO0lBQ0osQ0FBQztJQUVELFdBQVc7UUFDVCxJQUFJLENBQUMsY0FBYyxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ3BDLENBQUM7SUFFRCxTQUFTLENBQ1AsVUFBa0IsRUFDbEIsWUFBb0IsRUFDcEIsT0FNQztRQUVELE9BQU8sT0FBTyxDQUNaLFVBQVUsRUFDVixZQUFZLEVBQ1osZUFBZSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQ3RDLENBQUM7SUFDSixDQUFDOzt3R0FoQ1UsV0FBVztzR0FBWCxXQUFXOzJGQUFYLFdBQVc7a0JBRHZCLElBQUk7bUJBQUMsRUFBRSxJQUFJLEVBQUUsYUFBYSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUU7O0FBd0MxQyxNQUFNLE9BQU8saUJBQWlCOzs4R0FBakIsaUJBQWlCOytHQUFqQixpQkFBaUIsaUJBdkNqQixXQUFXLGFBQVgsV0FBVzsrR0F1Q1gsaUJBQWlCOzJGQUFqQixpQkFBaUI7a0JBSjdCLFFBQVE7bUJBQUM7b0JBQ1IsWUFBWSxFQUFFLENBQUMsV0FBVyxDQUFDO29CQUMzQixPQUFPLEVBQUUsQ0FBQyxXQUFXLENBQUM7aUJBQ3ZCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gIE5nTW9kdWxlLFxuICBPbkRlc3Ryb3ksXG4gIFBpcGUsXG4gIFBpcGVUcmFuc2Zvcm1cbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcbmltcG9ydCB7XG4gIGNhbGN1bGF0ZUxvY2FsZSxcbiAgRGF0ZUZuc0NvbmZpZ3VyYXRpb25TZXJ2aWNlXG59IGZyb20gJy4vZGF0ZS1mbnMtY29uZmlndXJhdGlvbi5zZXJ2aWNlJztcbmltcG9ydCB7IGlzTWF0Y2ggfSBmcm9tICdkYXRlLWZucyc7XG5pbXBvcnQgeyBEYXRlRm5zRmlyc3RXZWVrRGF5cywgRGF0ZUZuc1dlZWtJbmRleCB9IGZyb20gJy4vdHlwZXMnO1xuXG5AUGlwZSh7IG5hbWU6ICdkZm5zSXNNYXRjaCcsIHB1cmU6IGZhbHNlIH0pXG5leHBvcnQgY2xhc3MgSXNNYXRjaFBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtLCBPbkRlc3Ryb3kge1xuICBwcml2YXRlIGxvY2FsZUNoYW5nZWQkOiBTdWJzY3JpcHRpb247XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIGNvbmZpZzogRGF0ZUZuc0NvbmZpZ3VyYXRpb25TZXJ2aWNlLFxuICAgIHB1YmxpYyBjZDogQ2hhbmdlRGV0ZWN0b3JSZWZcbiAgKSB7XG4gICAgdGhpcy5sb2NhbGVDaGFuZ2VkJCA9IHRoaXMuY29uZmlnLmxvY2FsZUNoYW5nZWQuc3Vic2NyaWJlKF8gPT5cbiAgICAgIHRoaXMuY2QubWFya0ZvckNoZWNrKClcbiAgICApO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgdGhpcy5sb2NhbGVDaGFuZ2VkJC51bnN1YnNjcmliZSgpO1xuICB9XG5cbiAgdHJhbnNmb3JtKFxuICAgIGRhdGVTdHJpbmc6IHN0cmluZyxcbiAgICBmb3JtYXRTdHJpbmc6IHN0cmluZyxcbiAgICBvcHRpb25zPzoge1xuICAgICAgbG9jYWxlPzogTG9jYWxlO1xuICAgICAgd2Vla1N0YXJ0c09uPzogRGF0ZUZuc1dlZWtJbmRleDtcbiAgICAgIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZT86IERhdGVGbnNGaXJzdFdlZWtEYXlzO1xuICAgICAgdXNlQWRkaXRpb25hbFdlZWtZZWFyVG9rZW5zPzogYm9vbGVhbjtcbiAgICAgIHVzZUFkZGl0aW9uYWxEYXlPZlllYXJUb2tlbnM/OiBib29sZWFuO1xuICAgIH1cbiAgKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIGlzTWF0Y2goXG4gICAgICBkYXRlU3RyaW5nLFxuICAgICAgZm9ybWF0U3RyaW5nLFxuICAgICAgY2FsY3VsYXRlTG9jYWxlKG9wdGlvbnMsIHRoaXMuY29uZmlnKVxuICAgICk7XG4gIH1cbn1cblxuQE5nTW9kdWxlKHtcbiAgZGVjbGFyYXRpb25zOiBbSXNNYXRjaFBpcGVdLFxuICBleHBvcnRzOiBbSXNNYXRjaFBpcGVdXG59KVxuZXhwb3J0IGNsYXNzIElzTWF0Y2hQaXBlTW9kdWxlIHt9XG4iXX0=