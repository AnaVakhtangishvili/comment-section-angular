import { NgModule, Pipe } from '@angular/core';
import closestTo from 'date-fns/closestTo';
import * as i0 from "@angular/core";
export class ClosestToPipe {
    transform(dateToCompare, datesArray) {
        return closestTo(dateToCompare, datesArray);
    }
}
ClosestToPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: ClosestToPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
ClosestToPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: ClosestToPipe, name: "dfnsClosestTo" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: ClosestToPipe, decorators: [{
            type: Pipe,
            args: [{ name: 'dfnsClosestTo' }]
        }] });
export class ClosestToPipeModule {
}
ClosestToPipeModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: ClosestToPipeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
ClosestToPipeModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: ClosestToPipeModule, declarations: [ClosestToPipe], exports: [ClosestToPipe] });
ClosestToPipeModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: ClosestToPipeModule });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: ClosestToPipeModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [ClosestToPipe],
                    exports: [ClosestToPipe]
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xvc2VzdC10by5waXBlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvbGliL3NyYy9saWIvY2xvc2VzdC10by5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFpQixNQUFNLGVBQWUsQ0FBQztBQUU5RCxPQUFPLFNBQVMsTUFBTSxvQkFBb0IsQ0FBQzs7QUFHM0MsTUFBTSxPQUFPLGFBQWE7SUFDeEIsU0FBUyxDQUNQLGFBQStCLEVBQy9CLFVBQThCO1FBRTlCLE9BQU8sU0FBUyxDQUFDLGFBQWEsRUFBRSxVQUFVLENBQUMsQ0FBQztJQUM5QyxDQUFDOzswR0FOVSxhQUFhO3dHQUFiLGFBQWE7MkZBQWIsYUFBYTtrQkFEekIsSUFBSTttQkFBQyxFQUFFLElBQUksRUFBRSxlQUFlLEVBQUU7O0FBYy9CLE1BQU0sT0FBTyxtQkFBbUI7O2dIQUFuQixtQkFBbUI7aUhBQW5CLG1CQUFtQixpQkFibkIsYUFBYSxhQUFiLGFBQWE7aUhBYWIsbUJBQW1COzJGQUFuQixtQkFBbUI7a0JBSi9CLFFBQVE7bUJBQUM7b0JBQ1IsWUFBWSxFQUFFLENBQUMsYUFBYSxDQUFDO29CQUM3QixPQUFPLEVBQUUsQ0FBQyxhQUFhLENBQUM7aUJBQ3pCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdNb2R1bGUsIFBpcGUsIFBpcGVUcmFuc2Zvcm0gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IERhdGVGbnNJbnB1dERhdGUgfSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCBjbG9zZXN0VG8gZnJvbSAnZGF0ZS1mbnMvY2xvc2VzdFRvJztcblxuQFBpcGUoeyBuYW1lOiAnZGZuc0Nsb3Nlc3RUbycgfSlcbmV4cG9ydCBjbGFzcyBDbG9zZXN0VG9QaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG4gIHRyYW5zZm9ybShcbiAgICBkYXRlVG9Db21wYXJlOiBEYXRlRm5zSW5wdXREYXRlLFxuICAgIGRhdGVzQXJyYXk6IERhdGVGbnNJbnB1dERhdGVbXVxuICApOiBSZXR1cm5UeXBlPHR5cGVvZiBjbG9zZXN0VG8+IHtcbiAgICByZXR1cm4gY2xvc2VzdFRvKGRhdGVUb0NvbXBhcmUsIGRhdGVzQXJyYXkpO1xuICB9XG59XG5cbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9uczogW0Nsb3Nlc3RUb1BpcGVdLFxuICBleHBvcnRzOiBbQ2xvc2VzdFRvUGlwZV1cbn0pXG5leHBvcnQgY2xhc3MgQ2xvc2VzdFRvUGlwZU1vZHVsZSB7fVxuIl19