import { NgModule, Pipe } from '@angular/core';
import addMilliseconds from 'date-fns/addMilliseconds';
import * as i0 from "@angular/core";
export class AddMillisecondsPipe {
    transform(date, amount) {
        return addMilliseconds(date, amount);
    }
}
AddMillisecondsPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: AddMillisecondsPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
AddMillisecondsPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: AddMillisecondsPipe, name: "dfnsAddMilliseconds" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: AddMillisecondsPipe, decorators: [{
            type: Pipe,
            args: [{ name: 'dfnsAddMilliseconds' }]
        }] });
export class AddMillisecondsPipeModule {
}
AddMillisecondsPipeModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: AddMillisecondsPipeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
AddMillisecondsPipeModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: AddMillisecondsPipeModule, declarations: [AddMillisecondsPipe], exports: [AddMillisecondsPipe] });
AddMillisecondsPipeModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: AddMillisecondsPipeModule });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: AddMillisecondsPipeModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [AddMillisecondsPipe],
                    exports: [AddMillisecondsPipe]
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRkLW1pbGxpc2Vjb25kcy5waXBlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvbGliL3NyYy9saWIvYWRkLW1pbGxpc2Vjb25kcy5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFpQixNQUFNLGVBQWUsQ0FBQztBQUU5RCxPQUFPLGVBQWUsTUFBTSwwQkFBMEIsQ0FBQzs7QUFHdkQsTUFBTSxPQUFPLG1CQUFtQjtJQUM5QixTQUFTLENBQUMsSUFBc0IsRUFBRSxNQUFjO1FBQzlDLE9BQU8sZUFBZSxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztJQUN2QyxDQUFDOztnSEFIVSxtQkFBbUI7OEdBQW5CLG1CQUFtQjsyRkFBbkIsbUJBQW1CO2tCQUQvQixJQUFJO21CQUFDLEVBQUUsSUFBSSxFQUFFLHFCQUFxQixFQUFFOztBQVdyQyxNQUFNLE9BQU8seUJBQXlCOztzSEFBekIseUJBQXlCO3VIQUF6Qix5QkFBeUIsaUJBVnpCLG1CQUFtQixhQUFuQixtQkFBbUI7dUhBVW5CLHlCQUF5QjsyRkFBekIseUJBQXlCO2tCQUpyQyxRQUFRO21CQUFDO29CQUNSLFlBQVksRUFBRSxDQUFDLG1CQUFtQixDQUFDO29CQUNuQyxPQUFPLEVBQUUsQ0FBQyxtQkFBbUIsQ0FBQztpQkFDL0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSwgUGlwZSwgUGlwZVRyYW5zZm9ybSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRGF0ZUZuc0lucHV0RGF0ZSB9IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IGFkZE1pbGxpc2Vjb25kcyBmcm9tICdkYXRlLWZucy9hZGRNaWxsaXNlY29uZHMnO1xuXG5AUGlwZSh7IG5hbWU6ICdkZm5zQWRkTWlsbGlzZWNvbmRzJyB9KVxuZXhwb3J0IGNsYXNzIEFkZE1pbGxpc2Vjb25kc1BpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcbiAgdHJhbnNmb3JtKGRhdGU6IERhdGVGbnNJbnB1dERhdGUsIGFtb3VudDogbnVtYmVyKTogRGF0ZSB7XG4gICAgcmV0dXJuIGFkZE1pbGxpc2Vjb25kcyhkYXRlLCBhbW91bnQpO1xuICB9XG59XG5cbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9uczogW0FkZE1pbGxpc2Vjb25kc1BpcGVdLFxuICBleHBvcnRzOiBbQWRkTWlsbGlzZWNvbmRzUGlwZV1cbn0pXG5leHBvcnQgY2xhc3MgQWRkTWlsbGlzZWNvbmRzUGlwZU1vZHVsZSB7fVxuIl19