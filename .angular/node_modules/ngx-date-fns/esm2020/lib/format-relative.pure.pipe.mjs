import { NgModule, Pipe } from '@angular/core';
import formatRelative from 'date-fns/formatRelative';
import { calculateLocale } from './date-fns-configuration.service';
import { isValidDate } from './utils';
import * as i0 from "@angular/core";
import * as i1 from "./date-fns-configuration.service";
export class FormatRelativePurePipe {
    constructor(config) {
        this.config = config;
    }
    transform(date, dateToCompare, options) {
        if (isValidDate(date) && isValidDate(dateToCompare)) {
            return formatRelative(date, dateToCompare, calculateLocale(options, this.config));
        }
        return '';
    }
}
FormatRelativePurePipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: FormatRelativePurePipe, deps: [{ token: i1.DateFnsConfigurationService }], target: i0.ɵɵFactoryTarget.Pipe });
FormatRelativePurePipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: FormatRelativePurePipe, name: "dfnsFormatRelativePure" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: FormatRelativePurePipe, decorators: [{
            type: Pipe,
            args: [{ name: 'dfnsFormatRelativePure' }]
        }], ctorParameters: function () { return [{ type: i1.DateFnsConfigurationService }]; } });
export class FormatRelativePurePipeModule {
}
FormatRelativePurePipeModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: FormatRelativePurePipeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
FormatRelativePurePipeModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: FormatRelativePurePipeModule, declarations: [FormatRelativePurePipe], exports: [FormatRelativePurePipe] });
FormatRelativePurePipeModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: FormatRelativePurePipeModule });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: FormatRelativePurePipeModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [FormatRelativePurePipe],
                    exports: [FormatRelativePurePipe]
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybWF0LXJlbGF0aXZlLnB1cmUucGlwZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL2xpYi9zcmMvbGliL2Zvcm1hdC1yZWxhdGl2ZS5wdXJlLnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQWlCLE1BQU0sZUFBZSxDQUFDO0FBRTlELE9BQU8sY0FBYyxNQUFNLHlCQUF5QixDQUFDO0FBRXJELE9BQU8sRUFFTCxlQUFlLEVBQ2hCLE1BQU0sa0NBQWtDLENBQUM7QUFDMUMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLFNBQVMsQ0FBQzs7O0FBR3RDLE1BQU0sT0FBTyxzQkFBc0I7SUFDakMsWUFBbUIsTUFBbUM7UUFBbkMsV0FBTSxHQUFOLE1BQU0sQ0FBNkI7SUFBRyxDQUFDO0lBRTFELFNBQVMsQ0FDUCxJQUF5QyxFQUN6QyxhQUFrRCxFQUNsRCxPQUdDO1FBRUQsSUFBSSxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksV0FBVyxDQUFDLGFBQWEsQ0FBQyxFQUFFO1lBQ25ELE9BQU8sY0FBYyxDQUNuQixJQUFJLEVBQ0osYUFBYSxFQUNiLGVBQWUsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUN0QyxDQUFDO1NBQ0g7UUFDRCxPQUFPLEVBQUUsQ0FBQztJQUNaLENBQUM7O21IQW5CVSxzQkFBc0I7aUhBQXRCLHNCQUFzQjsyRkFBdEIsc0JBQXNCO2tCQURsQyxJQUFJO21CQUFDLEVBQUUsSUFBSSxFQUFFLHdCQUF3QixFQUFFOztBQTJCeEMsTUFBTSxPQUFPLDRCQUE0Qjs7eUhBQTVCLDRCQUE0QjswSEFBNUIsNEJBQTRCLGlCQTFCNUIsc0JBQXNCLGFBQXRCLHNCQUFzQjswSEEwQnRCLDRCQUE0QjsyRkFBNUIsNEJBQTRCO2tCQUp4QyxRQUFRO21CQUFDO29CQUNSLFlBQVksRUFBRSxDQUFDLHNCQUFzQixDQUFDO29CQUN0QyxPQUFPLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQztpQkFDbEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSwgUGlwZSwgUGlwZVRyYW5zZm9ybSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTG9jYWxlIH0gZnJvbSAnZGF0ZS1mbnMnO1xuaW1wb3J0IGZvcm1hdFJlbGF0aXZlIGZyb20gJ2RhdGUtZm5zL2Zvcm1hdFJlbGF0aXZlJztcbmltcG9ydCB7IERhdGVGbnNJbnB1dERhdGUgfSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCB7XG4gIERhdGVGbnNDb25maWd1cmF0aW9uU2VydmljZSxcbiAgY2FsY3VsYXRlTG9jYWxlXG59IGZyb20gJy4vZGF0ZS1mbnMtY29uZmlndXJhdGlvbi5zZXJ2aWNlJztcbmltcG9ydCB7IGlzVmFsaWREYXRlIH0gZnJvbSAnLi91dGlscyc7XG5cbkBQaXBlKHsgbmFtZTogJ2RmbnNGb3JtYXRSZWxhdGl2ZVB1cmUnIH0pXG5leHBvcnQgY2xhc3MgRm9ybWF0UmVsYXRpdmVQdXJlUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgY29uZmlnOiBEYXRlRm5zQ29uZmlndXJhdGlvblNlcnZpY2UpIHt9XG5cbiAgdHJhbnNmb3JtKFxuICAgIGRhdGU6IERhdGVGbnNJbnB1dERhdGUgfCBudWxsIHwgdW5kZWZpbmVkLFxuICAgIGRhdGVUb0NvbXBhcmU6IERhdGVGbnNJbnB1dERhdGUgfCBudWxsIHwgdW5kZWZpbmVkLFxuICAgIG9wdGlvbnM/OiB7XG4gICAgICBsb2NhbGU/OiBMb2NhbGU7XG4gICAgICB3ZWVrU3RhcnRzT24/OiAwIHwgMSB8IDIgfCAzIHwgNCB8IDUgfCA2O1xuICAgIH1cbiAgKTogc3RyaW5nIHtcbiAgICBpZiAoaXNWYWxpZERhdGUoZGF0ZSkgJiYgaXNWYWxpZERhdGUoZGF0ZVRvQ29tcGFyZSkpIHtcbiAgICAgIHJldHVybiBmb3JtYXRSZWxhdGl2ZShcbiAgICAgICAgZGF0ZSxcbiAgICAgICAgZGF0ZVRvQ29tcGFyZSxcbiAgICAgICAgY2FsY3VsYXRlTG9jYWxlKG9wdGlvbnMsIHRoaXMuY29uZmlnKVxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuICcnO1xuICB9XG59XG5cbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9uczogW0Zvcm1hdFJlbGF0aXZlUHVyZVBpcGVdLFxuICBleHBvcnRzOiBbRm9ybWF0UmVsYXRpdmVQdXJlUGlwZV1cbn0pXG5leHBvcnQgY2xhc3MgRm9ybWF0UmVsYXRpdmVQdXJlUGlwZU1vZHVsZSB7fVxuIl19