import { NgModule, Pipe } from '@angular/core';
import getWeek from 'date-fns/getWeek';
import { calculateLocale } from './date-fns-configuration.service';
import * as i0 from "@angular/core";
import * as i1 from "./date-fns-configuration.service";
export class GetWeekPurePipe {
    constructor(config) {
        this.config = config;
    }
    transform(date, options) {
        return getWeek(date, calculateLocale(options, this.config));
    }
}
GetWeekPurePipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: GetWeekPurePipe, deps: [{ token: i1.DateFnsConfigurationService }], target: i0.ɵɵFactoryTarget.Pipe });
GetWeekPurePipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: GetWeekPurePipe, name: "dfnsGetWeekPure" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: GetWeekPurePipe, decorators: [{
            type: Pipe,
            args: [{ name: 'dfnsGetWeekPure' }]
        }], ctorParameters: function () { return [{ type: i1.DateFnsConfigurationService }]; } });
export class GetWeekPurePipeModule {
}
GetWeekPurePipeModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: GetWeekPurePipeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
GetWeekPurePipeModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: GetWeekPurePipeModule, declarations: [GetWeekPurePipe], exports: [GetWeekPurePipe] });
GetWeekPurePipeModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: GetWeekPurePipeModule });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: GetWeekPurePipeModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [GetWeekPurePipe],
                    exports: [GetWeekPurePipe]
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0LXdlZWsucHVyZS5waXBlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvbGliL3NyYy9saWIvZ2V0LXdlZWsucHVyZS5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFpQixNQUFNLGVBQWUsQ0FBQztBQUU5RCxPQUFPLE9BQU8sTUFBTSxrQkFBa0IsQ0FBQztBQUN2QyxPQUFPLEVBQ0wsZUFBZSxFQUVoQixNQUFNLGtDQUFrQyxDQUFDOzs7QUFRMUMsTUFBTSxPQUFPLGVBQWU7SUFDMUIsWUFBbUIsTUFBbUM7UUFBbkMsV0FBTSxHQUFOLE1BQU0sQ0FBNkI7SUFBRyxDQUFDO0lBRTFELFNBQVMsQ0FDUCxJQUFzQixFQUN0QixPQUlDO1FBRUQsT0FBTyxPQUFPLENBQUMsSUFBSSxFQUFFLGVBQWUsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFDOUQsQ0FBQzs7NEdBWlUsZUFBZTswR0FBZixlQUFlOzJGQUFmLGVBQWU7a0JBRDNCLElBQUk7bUJBQUMsRUFBRSxJQUFJLEVBQUUsaUJBQWlCLEVBQUU7O0FBb0JqQyxNQUFNLE9BQU8scUJBQXFCOztrSEFBckIscUJBQXFCO21IQUFyQixxQkFBcUIsaUJBbkJyQixlQUFlLGFBQWYsZUFBZTttSEFtQmYscUJBQXFCOzJGQUFyQixxQkFBcUI7a0JBSmpDLFFBQVE7bUJBQUM7b0JBQ1IsWUFBWSxFQUFFLENBQUMsZUFBZSxDQUFDO29CQUMvQixPQUFPLEVBQUUsQ0FBQyxlQUFlLENBQUM7aUJBQzNCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdNb2R1bGUsIFBpcGUsIFBpcGVUcmFuc2Zvcm0gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IExvY2FsZSB9IGZyb20gJ2RhdGUtZm5zJztcbmltcG9ydCBnZXRXZWVrIGZyb20gJ2RhdGUtZm5zL2dldFdlZWsnO1xuaW1wb3J0IHtcbiAgY2FsY3VsYXRlTG9jYWxlLFxuICBEYXRlRm5zQ29uZmlndXJhdGlvblNlcnZpY2Vcbn0gZnJvbSAnLi9kYXRlLWZucy1jb25maWd1cmF0aW9uLnNlcnZpY2UnO1xuaW1wb3J0IHtcbiAgRGF0ZUZuc0ZpcnN0V2Vla0RheXMsXG4gIERhdGVGbnNJbnB1dERhdGUsXG4gIERhdGVGbnNXZWVrSW5kZXhcbn0gZnJvbSAnLi90eXBlcyc7XG5cbkBQaXBlKHsgbmFtZTogJ2RmbnNHZXRXZWVrUHVyZScgfSlcbmV4cG9ydCBjbGFzcyBHZXRXZWVrUHVyZVBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcbiAgY29uc3RydWN0b3IocHVibGljIGNvbmZpZzogRGF0ZUZuc0NvbmZpZ3VyYXRpb25TZXJ2aWNlKSB7fVxuXG4gIHRyYW5zZm9ybShcbiAgICBkYXRlOiBEYXRlRm5zSW5wdXREYXRlLFxuICAgIG9wdGlvbnM/OiB7XG4gICAgICBsb2NhbGU/OiBMb2NhbGU7XG4gICAgICB3ZWVrU3RhcnRzT24/OiBEYXRlRm5zV2Vla0luZGV4O1xuICAgICAgZmlyc3RXZWVrQ29udGFpbnNEYXRlPzogRGF0ZUZuc0ZpcnN0V2Vla0RheXM7XG4gICAgfVxuICApOiBudW1iZXIge1xuICAgIHJldHVybiBnZXRXZWVrKGRhdGUsIGNhbGN1bGF0ZUxvY2FsZShvcHRpb25zLCB0aGlzLmNvbmZpZykpO1xuICB9XG59XG5cbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9uczogW0dldFdlZWtQdXJlUGlwZV0sXG4gIGV4cG9ydHM6IFtHZXRXZWVrUHVyZVBpcGVdXG59KVxuZXhwb3J0IGNsYXNzIEdldFdlZWtQdXJlUGlwZU1vZHVsZSB7fVxuIl19