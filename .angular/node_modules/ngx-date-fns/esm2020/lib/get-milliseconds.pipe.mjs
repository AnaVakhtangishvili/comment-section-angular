import { NgModule, Pipe } from '@angular/core';
import getMilliseconds from 'date-fns/getMilliseconds';
import * as i0 from "@angular/core";
export class GetMillisecondsPipe {
    transform(date) {
        return getMilliseconds(date);
    }
}
GetMillisecondsPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: GetMillisecondsPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
GetMillisecondsPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: GetMillisecondsPipe, name: "dfnsGetMilliseconds" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: GetMillisecondsPipe, decorators: [{
            type: Pipe,
            args: [{ name: 'dfnsGetMilliseconds' }]
        }] });
export class GetMillisecondsPipeModule {
}
GetMillisecondsPipeModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: GetMillisecondsPipeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
GetMillisecondsPipeModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: GetMillisecondsPipeModule, declarations: [GetMillisecondsPipe], exports: [GetMillisecondsPipe] });
GetMillisecondsPipeModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: GetMillisecondsPipeModule });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: GetMillisecondsPipeModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [GetMillisecondsPipe],
                    exports: [GetMillisecondsPipe]
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0LW1pbGxpc2Vjb25kcy5waXBlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvbGliL3NyYy9saWIvZ2V0LW1pbGxpc2Vjb25kcy5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFpQixNQUFNLGVBQWUsQ0FBQztBQUU5RCxPQUFPLGVBQWUsTUFBTSwwQkFBMEIsQ0FBQzs7QUFHdkQsTUFBTSxPQUFPLG1CQUFtQjtJQUM5QixTQUFTLENBQUMsSUFBc0I7UUFDOUIsT0FBTyxlQUFlLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDL0IsQ0FBQzs7Z0hBSFUsbUJBQW1COzhHQUFuQixtQkFBbUI7MkZBQW5CLG1CQUFtQjtrQkFEL0IsSUFBSTttQkFBQyxFQUFFLElBQUksRUFBRSxxQkFBcUIsRUFBRTs7QUFXckMsTUFBTSxPQUFPLHlCQUF5Qjs7c0hBQXpCLHlCQUF5Qjt1SEFBekIseUJBQXlCLGlCQVZ6QixtQkFBbUIsYUFBbkIsbUJBQW1CO3VIQVVuQix5QkFBeUI7MkZBQXpCLHlCQUF5QjtrQkFKckMsUUFBUTttQkFBQztvQkFDUixZQUFZLEVBQUUsQ0FBQyxtQkFBbUIsQ0FBQztvQkFDbkMsT0FBTyxFQUFFLENBQUMsbUJBQW1CLENBQUM7aUJBQy9CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdNb2R1bGUsIFBpcGUsIFBpcGVUcmFuc2Zvcm0gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IERhdGVGbnNJbnB1dERhdGUgfSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCBnZXRNaWxsaXNlY29uZHMgZnJvbSAnZGF0ZS1mbnMvZ2V0TWlsbGlzZWNvbmRzJztcblxuQFBpcGUoeyBuYW1lOiAnZGZuc0dldE1pbGxpc2Vjb25kcycgfSlcbmV4cG9ydCBjbGFzcyBHZXRNaWxsaXNlY29uZHNQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG4gIHRyYW5zZm9ybShkYXRlOiBEYXRlRm5zSW5wdXREYXRlKTogbnVtYmVyIHtcbiAgICByZXR1cm4gZ2V0TWlsbGlzZWNvbmRzKGRhdGUpO1xuICB9XG59XG5cbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9uczogW0dldE1pbGxpc2Vjb25kc1BpcGVdLFxuICBleHBvcnRzOiBbR2V0TWlsbGlzZWNvbmRzUGlwZV1cbn0pXG5leHBvcnQgY2xhc3MgR2V0TWlsbGlzZWNvbmRzUGlwZU1vZHVsZSB7fVxuIl19